
.. _program_listing_file_src_flamegpu_model_EnvironmentDescription.cpp:

Program Listing for File EnvironmentDescription.cpp
===================================================

|exhale_lsh| :ref:`Return to documentation for file <file_src_flamegpu_model_EnvironmentDescription.cpp>` (``src/flamegpu/model/EnvironmentDescription.cpp``)

.. |exhale_lsh| unicode:: U+021B0 .. UPWARDS ARROW WITH TIP LEFTWARDS

.. code-block:: cpp

   #include "flamegpu/model/EnvironmentDescription.h"
   
   namespace flamegpu {
   
   CEnvironmentDescription::CEnvironmentDescription(std::shared_ptr<EnvironmentData> data)
       : environment(std::move(data)) { }
   CEnvironmentDescription::CEnvironmentDescription(std::shared_ptr<const EnvironmentData> data)
       : environment(std::const_pointer_cast<EnvironmentData>(data)) { }
   
   bool CEnvironmentDescription::operator==(const CEnvironmentDescription& rhs) const {
       return *this->environment == *rhs.environment;  // Compare content is functionally the same
   }
   bool CEnvironmentDescription::operator!=(const CEnvironmentDescription& rhs) const {
       return !(*this == rhs);
   }
   
   bool CEnvironmentDescription::getConst(const std::string& name) const {
       for (auto& i : environment->properties) {
           if (i.first == name) {
               return i.second.isConst;
           }
       }
       THROW exception::InvalidEnvProperty("Environmental property with name '%s' does not exist, "
           "in EnvironmentDescription::getConst().",
           name.c_str());
   }
   
   EnvironmentDescription::EnvironmentDescription(std::shared_ptr<EnvironmentData> data)
       : CEnvironmentDescription(std::move(data)) { }
   
   void EnvironmentDescription::newProperty(const std::string &name, const char *ptr, size_t length, bool isConst, flamegpu::size_type elements, const std::type_index &type) {
       environment->properties.emplace(name, EnvironmentData::PropData(isConst, detail::Any(ptr, length, type, elements)));
   }
   
   }  // namespace flamegpu
